#Input 
#Xcode logs output by autogenerated method invocations

#Requirements
#Infer which invocation numbers failed/succeeded
#Infer apparent entitlement requirements based on error message from completion handlers
#Detect which invocation numbers should have had completion handlers
#Map new information to mach-port and method declaration

import pickle
import re

def checkForTermination(id, thisInvocation):
  pass


#TODO: this code needs to get a lot smarter as we collect more entitlement samples
def lookForEntReqs(id, thisInvocation):
  errorString = "NSError * var"
  for line in thisInvocation["logLines"]:
    if errorString in line:
      if "entitlement" in line:
        #TODO we should have a corpus of known entitlement keys and search for them here
        #TODO we can use sanity checks such as detecting when we 
        # find zero or more than one key to identify likely false positives and false negatives.
        fancyQuoteSlices= line.split('\xe2\x80\x9c')[1:] 
        for slice in fancyQuoteSlices:
          thisInvocation["entitlementReqSet"].add(slice.split('\xe2\x80\x9d')[0])
        if len(thisInvocation["entitlementReqSet"]) == 0:
          thisInvocation["entitlementReqSet"].add("ERROR: Entitlement key should be here, but I couldn't find it.")
          
        

def parseRelevantLogs(id, thisInvocation, raw_xcode_logs):
  logLines = raw_xcode_logs.split("\n")
  for line in logLines:
    idTag = "id "+id+": "
    if idTag in line:
      #break off the text before the id tag
      thisInvocation["logLines"].append(line.split(idTag)[-1])

def checkForCompletionStatus(id, thisInvocation):
  completionString = "Completion message"
  if completionString in thisInvocation["logLines"]:
    thisInvocation["valid"] = True
    

raw_xcode_logs = open("input_data/xcode_results.txt","rb").read()

#TODO I need to know how many invocations to search for.
# Perhaps it would be easier to deal with this if I could import a pickle file with data from map_potential_methods_to_mach-ports.py
with open('./input_data/invocationDictionary.pk', 'rb') as handle:
    invocationDictionary = pickle.load(handle)
print invocationDictionary

for id in invocationDictionary:
  thisInvocation = invocationDictionary[id]
  id = str(id)
  thisProtocol = thisInvocation["protocol"]
  thisMethod = thisInvocation["method"]
  thisMachPort = thisInvocation["mach-port"]
  thisInvocation["valid"] = False
  thisInvocation["entitlementReqSet"] = set()
  thisInvocation["logLines"] = []
  #The invocation is the correct combination of accessible mach-port and remote method
  #Note that a valid invocation could still be inaccessible due to decentralized checks

  #run various tests to see if the connection should be considered valid or not
  
  
  parseRelevantLogs(id, thisInvocation, raw_xcode_logs)
  checkForTermination(id, thisInvocation)

  #block based tests
  hasBlockString = "Invocation has a completion handler"
  if hasBlockString in thisInvocation["logLines"]:
    checkForCompletionStatus(id, thisInvocation)
    lookForEntReqs(id, thisInvocation)

  print id
  print "  "+thisProtocol
  print "  "+thisMethod
  print "  "+thisMachPort
  print "  "+str(thisInvocation["valid"])
  print "  "+str(thisInvocation["entitlementReqSet"])
  #for line in thisInvocation["logLines"]:
  #  print "  "+line
