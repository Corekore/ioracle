####################################
#Unix Rules
####################################

unixAllow(puid(Puid),pgid(Pgid),coarseOp(Op),file(File)))
  Determines if the unix permissions allow a process running with the authority of Puid and Pgid to perform an Op on a File.
  To call this rule, you may need to consult the process ownership facts to get the process's Unix authority.
  This rule gets the ownership and relevant permission bits (based on Op) for File.
  The rule then steps through the rules governing Unix permissions to resolve whether access is allowed.

matchGroup(Puid,Pgid,Gowner)
  Determines if the process should be considered a group owner of the file.
  This is true if the process group id matches the file's owning group.
  It is also true if the process user id is a member of the file's owning group.

getRelBits(coarseOp("read"),file(File),uownBit(Ubit),gownBit(Gbit),worldBit(Wbit))
getRelBits(coarseOp("write"),file(File),uownBit(Ubit),gownBit(Gbit),worldBit(Wbit))
getRelBits(coarseOp("execute"),file(File),uownBit(Ubit),gownBit(Gbit),worldBit(Wbit))
  These rules get the relevant bits for the operation being evaluated.
  We have facts for special bits, but I don't think that we are modelling them yet.
  TODO We should probably support the sticky bit for directories since it can restrict operations in that directory.
  We could also make a query to see if it is ever used in the iOS file system.

getRelevantCoarseOp(coarseOp(Cop),operation(Op)):-
  This rule is optional and serves to help map a coarse unix operation (read, write, execute) to a sandbox operation.
  The rule is incomplete, but has enough to show how it would be expanded.
  For now, I think we should manually determine our coarse operations in queries, and we will usually be using "write" as our coarse operation.

hasUser(process(Proc),user(User)):-
  This is another helper function that matches a process to a user name instead of just the UID number listed in process ownership.

dirExecute(puid(Puid),pgid(Pgid),coarseOp(Op),file("/")):-
  Base case of recursive rule.
  Treats the root directory differently because it does not have a parent directory.
dirExecute(puid(Puid),pgid(Pgid),coarseOp(Op),file(File)):-
  These rules determine recursively if a directory and all of its parents are executable.
  A file cannot be accessed if the process's user authority does not grant execute rights to the current directory of the file and all its parent directories.
  We should pair this rule with the unixAllow rule when making queries since they really both need to be satisfied to get access to a file.

